// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package atkinsDiet

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson9ea8f204DecodeGithubCom8tomat8SlotMachineMachinesAtkinsDiet(in *jlexer.Lexer, out *SpinResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Type":
			out.Type = SpinKind(in.String())
		case "Total":
			out.Total = uint64(in.Uint64())
		case "Stops":
			if in.IsNull() {
				in.Skip()
			} else {
				copy(out.Stops[:], in.Bytes())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9ea8f204EncodeGithubCom8tomat8SlotMachineMachinesAtkinsDiet(out *jwriter.Writer, in SpinResult) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"Total\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Total))
	}
	{
		const prefix string = ",\"Stops\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Base64Bytes(in.Stops[:])
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SpinResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9ea8f204EncodeGithubCom8tomat8SlotMachineMachinesAtkinsDiet(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SpinResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9ea8f204EncodeGithubCom8tomat8SlotMachineMachinesAtkinsDiet(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SpinResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9ea8f204DecodeGithubCom8tomat8SlotMachineMachinesAtkinsDiet(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SpinResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9ea8f204DecodeGithubCom8tomat8SlotMachineMachinesAtkinsDiet(l, v)
}
func easyjson9ea8f204DecodeGithubCom8tomat8SlotMachineMachinesAtkinsDiet1(in *jlexer.Lexer, out *Spin) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Type":
			out.Type = SpinKind(in.String())
		case "Total":
			out.Total = uint(in.Uint())
		case "Stops":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('[')
				v3 := 0
				for !in.IsDelim(']') {
					if v3 < 5 {
						(out.Stops)[v3] = uint(in.Uint())
						v3++
					} else {
						in.SkipRecursive()
					}
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9ea8f204EncodeGithubCom8tomat8SlotMachineMachinesAtkinsDiet1(out *jwriter.Writer, in Spin) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"Total\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint(uint(in.Total))
	}
	{
		const prefix string = ",\"Stops\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.RawByte('[')
		for v4 := range in.Stops {
			if v4 > 0 {
				out.RawByte(',')
			}
			out.Uint(uint((in.Stops)[v4]))
		}
		out.RawByte(']')
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Spin) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9ea8f204EncodeGithubCom8tomat8SlotMachineMachinesAtkinsDiet1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Spin) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9ea8f204EncodeGithubCom8tomat8SlotMachineMachinesAtkinsDiet1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Spin) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9ea8f204DecodeGithubCom8tomat8SlotMachineMachinesAtkinsDiet1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Spin) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9ea8f204DecodeGithubCom8tomat8SlotMachineMachinesAtkinsDiet1(l, v)
}
