// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package apiHTTP

import (
	json "encoding/json"
	atkinsDiet "github.com/8tomat8/slotMachine/machines/atkinsDiet"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	zap "go.uber.org/zap"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson3d6050f6DecodeGithubCom8tomat8SlotMachineApiHTTP(in *jlexer.Lexer, out *srv) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3d6050f6EncodeGithubCom8tomat8SlotMachineApiHTTP(out *jwriter.Writer, in srv) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v srv) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3d6050f6EncodeGithubCom8tomat8SlotMachineApiHTTP(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v srv) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3d6050f6EncodeGithubCom8tomat8SlotMachineApiHTTP(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *srv) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3d6050f6DecodeGithubCom8tomat8SlotMachineApiHTTP(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *srv) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3d6050f6DecodeGithubCom8tomat8SlotMachineApiHTTP(l, v)
}
func easyjson3d6050f6DecodeGithubCom8tomat8SlotMachineApiHTTP1(in *jlexer.Lexer, out *resp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "total":
			out.Total = uint(in.Uint())
		case "spins":
			if in.IsNull() {
				in.Skip()
				out.Spins = nil
			} else {
				in.Delim('[')
				if out.Spins == nil {
					if !in.IsDelim(']') {
						out.Spins = make([]atkinsDiet.Spin, 0, 1)
					} else {
						out.Spins = []atkinsDiet.Spin{}
					}
				} else {
					out.Spins = (out.Spins)[:0]
				}
				for !in.IsDelim(']') {
					var v1 atkinsDiet.Spin
					(v1).UnmarshalEasyJSON(in)
					out.Spins = append(out.Spins, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "jwt":
			out.JWT = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3d6050f6EncodeGithubCom8tomat8SlotMachineApiHTTP1(out *jwriter.Writer, in resp) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"total\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint(uint(in.Total))
	}
	{
		const prefix string = ",\"spins\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Spins == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Spins {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"jwt\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.JWT))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v resp) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3d6050f6EncodeGithubCom8tomat8SlotMachineApiHTTP1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v resp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3d6050f6EncodeGithubCom8tomat8SlotMachineApiHTTP1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *resp) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3d6050f6DecodeGithubCom8tomat8SlotMachineApiHTTP1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *resp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3d6050f6DecodeGithubCom8tomat8SlotMachineApiHTTP1(l, v)
}
func easyjson3d6050f6DecodeGithubCom8tomat8SlotMachineApiHTTP2(in *jlexer.Lexer, out *UserData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "uid":
			out.UID = string(in.String())
		case "chips":
			out.Chips = uint(in.Uint())
		case "bet":
			out.Bet = uint(in.Uint())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3d6050f6EncodeGithubCom8tomat8SlotMachineApiHTTP2(out *jwriter.Writer, in UserData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"uid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UID))
	}
	{
		const prefix string = ",\"chips\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint(uint(in.Chips))
	}
	{
		const prefix string = ",\"bet\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint(uint(in.Bet))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3d6050f6EncodeGithubCom8tomat8SlotMachineApiHTTP2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3d6050f6EncodeGithubCom8tomat8SlotMachineApiHTTP2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3d6050f6DecodeGithubCom8tomat8SlotMachineApiHTTP2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3d6050f6DecodeGithubCom8tomat8SlotMachineApiHTTP2(l, v)
}
func easyjson3d6050f6DecodeGithubCom8tomat8SlotMachineApiHTTP3(in *jlexer.Lexer, out *Handler) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Log":
			if in.IsNull() {
				in.Skip()
				out.Log = nil
			} else {
				if out.Log == nil {
					out.Log = new(zap.SugaredLogger)
				}
				easyjson3d6050f6DecodeGoUberOrgZap(in, &*out.Log)
			}
		case "JWTSecret":
			if in.IsNull() {
				in.Skip()
				out.JWTSecret = nil
			} else {
				out.JWTSecret = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3d6050f6EncodeGithubCom8tomat8SlotMachineApiHTTP3(out *jwriter.Writer, in Handler) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Log\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Log == nil {
			out.RawString("null")
		} else {
			easyjson3d6050f6EncodeGoUberOrgZap(out, *in.Log)
		}
	}
	{
		const prefix string = ",\"JWTSecret\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Base64Bytes(in.JWTSecret)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Handler) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3d6050f6EncodeGithubCom8tomat8SlotMachineApiHTTP3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Handler) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3d6050f6EncodeGithubCom8tomat8SlotMachineApiHTTP3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Handler) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3d6050f6DecodeGithubCom8tomat8SlotMachineApiHTTP3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Handler) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3d6050f6DecodeGithubCom8tomat8SlotMachineApiHTTP3(l, v)
}
func easyjson3d6050f6DecodeGoUberOrgZap(in *jlexer.Lexer, out *zap.SugaredLogger) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3d6050f6EncodeGoUberOrgZap(out *jwriter.Writer, in zap.SugaredLogger) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}
